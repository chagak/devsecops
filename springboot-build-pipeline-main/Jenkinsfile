
pipeline {
  agent { label 'build' }
   environment { 
        registry = "kkouevi/democicd" 
        registryCredential = 'dockerhub' 
   }

  stages {
    stage('Checkout') {
      steps {
        cleanWs() // Cleans workspace before checkout
        git branch: 'main', credentialsId: 'GithubCred', url: 'https://github.com/chagak/devsecops.git'
      }
    }
    stage('Debug Workspace') {
      steps {
        sh 'pwd && ls -la' // Check current directory and list files
      }
    }

    stage('Stage I: Build') {
      steps {
        echo "Building Jar Component ..."
        sh """
         export JAVA_HOME=/usr/lib/jvm/java-8-openjdk-amd64
         cd springboot-build-pipeline-main || exit 1
         ls -la  # Verify pom.xml exists
         mvn clean package
         
         """
      }
    }

   stage('Stage II: Code Coverage ') {
      steps {
	    echo "Running Code Coverage ..."
        sh """
          export JAVA_HOME=/usr/lib/jvm/java-8-openjdk-amd64
          cd springboot-build-pipeline-main || exit 1
          ls -la  # Verify pom.xml exists
          mvn jacoco:report
          
          """
      }
    }

   stage('Stage III: SCA') {
      steps { 
        echo "Running Software Composition Analysis using OWASP Dependency-Check ..."
        sh """
              export JAVA_HOME=/usr/lib/jvm/java-8-openjdk-amd64
              cd springboot-build-pipeline-main || exit 1
              ls -la  # Verify pom.xml exists
              mvn org.owasp:dependency-check-maven:check
              """


      }
    }

   stage('Stage IV: SAST') {
      steps { 
        echo "Running Static application security testing using SonarQube Scanner ..."
        withSonarQubeEnv('mysonarqube') {
            sh """
            cd springboot-build-pipeline-main || exit 1
            ls -la  # Verify pom.xml exists
            mvn sonar:sonar 
            -Dsonar.coverage.jacoco.xmlReportPaths=target/site/jacoco/jacoco.xml 
            -Dsonar.dependencyCheck.jsonReportPath=target/dependency-check-report.json 
            -Dsonar.dependencyCheck.htmlReportPath=target/dependency-check-report.html 
            -Dsonar.projectName=chaganoteSonarProject
            
            
            """
       }
      }
    }

  //  stage('Stage V: QualityGates') {
  //     steps { 
  //       echo "Running Quality Gates to verify the code quality"
  //       script {
  //         timeout(time: 1, unit: 'MINUTES') {
  //           def qg = waitForQualityGate()
  //           if (qg.status != 'OK') {
  //             error "Pipeline aborted due to quality gate failure: ${qg.status}"
  //           }
  //          }
  //       }
  //     }
  //   }
   
  //  stage('Stage VI: Build Image') {
  //     steps { 
  //       echo "Build Docker Image"
  //       script {
  //              docker.withRegistry( '', registryCredential ) { 
  //                myImage = docker.build registry
  //                myImage.push()
  //               }
  //       }
  //     }
  //   }
        
  //  stage('Stage VII: Scan Image ') {
  //     steps { 
  //       echo "Scanning Image for Vulnerabilities"
  //       sh "trivy image --scanners vuln --offline-scan kkouevi/democicd:latest > trivyresults.txt"
  //       }
  //   }
          
  //  stage('Stage VIII: Smoke Test ') {
    //   steps { 
    //     echo "Smoke Test the Image"
    //     sh "docker run -d --name smokerun -p 8080:8080 kkouevi/democicd"
    //     sh "sleep 90; ./check.sh"
    //     sh "docker rm --force smokerun"
    //     }
    // }

  }
}